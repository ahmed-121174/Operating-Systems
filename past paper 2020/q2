Parent Program (Main Program)
This program forks child processes and uses execv to execute other instances of the program.

Parent Program (main_execv.c)
c
Copy code
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

void print_pid(const char* name) {
    printf("%s PID: %d, Parent PID: %d\n", name, getpid(), getppid());
}

int main(int argc, char* argv[]) {
    if (argc == 1) { // First execution
        print_pid("P1");

        pid_t pid;
        if ((pid = fork()) == 0) {
            execl("./child_execv", "./child_execv", "P2", NULL);
        } else if ((pid = fork()) == 0) {
            execl("./child_execv", "./child_execv", "P3", NULL);
        } else if ((pid = fork()) == 0) {
            execl("./child_execv", "./child_execv", "P4", NULL);
        }
    } else { // Child processes handled here
        print_pid(argv[1]);

        if (argv[1][0] == 'P' && argv[1][1] == '2') {
            if (fork() == 0) {
                execl("./child_execv", "./child_execv", "P5", NULL);
            } else if (fork() == 0) {
                execl("./child_execv", "./child_execv", "P6", NULL);
            }
        } else if (argv[1][0] == 'P' && argv[1][1] == '3') {
            if (fork() == 0) {
                execl("./child_execv", "./child_execv", "P7", NULL);
            }
        } else if (argv[1][0] == 'P' && argv[1][1] == '4') {
            if (fork() == 0) {
                execl("./child_execv", "./child_execv", "P8", NULL);
            } else if (fork() == 0) {
                execl("./child_execv", "./child_execv", "P9", NULL);
            }
        }
    }

    sleep(1); // Ensure orderly output
    return 0;
}
Child Program (child_execv.c)
c
Copy code
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

void print_pid(const char* name) {
    printf("%s PID: %d, Parent PID: %d\n", name, getpid(), getppid());
}

int main(int argc, char* argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <process_name>\n", argv[0]);
        return 1;
    }

    print_pid(argv[1]);
    sleep(1); // Ensures orderly output
    return 0;
}
Steps to Compile and Run
Save the parent program as main_execv.c.
Save the child program as child_execv.c.
Compile both programs:
bash
Copy code
gcc -o main_execv main_execv.c
gcc -o child_execv child_execv.c
Run the parent program:
bash
Copy code
./main_execv
